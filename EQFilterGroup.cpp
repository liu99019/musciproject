#include "EQFilterGroup.h"

EQFilterGroup::EQFilterGroup():
    _low_gain(1.0),
    _mid_gain(1.0),
    _high_gain(1.0)
{
    low_band_filter_channel1(0, 0, 1);
    low_band_filter_channel2(0, 0, 1);
    mid_band_filter_channel1(0, 0, 1);
    mid_band_filter_channel2(0, 0, 1);
}

QBuffer *EQFilterGroup::filter(const QAudioBuffer &buffer)
{
    QVector<float> channel1;
    QVector<float> channel2;
    decode_channel<qint32>(channel1, channel2, buffer);
    QVector<float> filtered_channel1;
    QVector<float> filtered_channel2;

    for (auto i = 0; i < channel1.count() && i < channel2.count(); ++i){
        float left =  _low_gain * low_band_filter_channel1(channel1[i], 0, 0) +
                       _mid_gain * mid_band_filter_channel1(channel1[i], 0, 0) +
                       _high_gain * high_band_filter_channel1(channel1[i], 0, 0);

        float right =  _low_gain * low_band_filter_channel2(channel2[i], 0, 0) +
                       _mid_gain * mid_band_filter_channel2(channel2[i], 0, 0) +
                       _high_gain * high_band_filter_channel2(channel2[i], 0, 0);

        filtered_channel1.append(left);
        filtered_channel2.append(right);
    }

    QByteArray array;
    encode_channel<qint32>(filtered_channel1, filtered_channel2, array);
    auto qb = new QBuffer();
    qb->setData(array);
    return qb;
}

float EQFilterGroup::low_band_filter_channel2(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[99] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
    static float znum[50] = {
        0.0,3.204e-06,1.493e-05,3.84e-05,7.689e-05,1.337e-04,2.12e-04,3.151e-04,4.459e-04,6.074e-04,
        8.023e-04,1.033e-03,1.301e-03,1.61e-03,1.959e-03,2.352e-03,2.787e-03,3.266e-03,3.788e-03,4.352e-03,
        4.959e-03,5.606e-03,6.291e-03,7.011e-03,7.765e-03,8.548e-03,9.358e-03,1.019e-02,1.104e-02,1.19e-02,
        1.277e-02,1.364e-02,1.451e-02,1.537e-02,1.622e-02,1.705e-02,1.785e-02,1.863e-02,1.936e-02,2.006e-02,
        2.071e-02,2.131e-02,2.185e-02,2.234e-02,2.276e-02,2.312e-02,2.341e-02,2.363e-02,2.378e-02,2.385e-02
    };
    if (setic==1){
        for (i=0;i<99;i++) states[i] = initval;
        return initval;
    }
    else{
        for (i=0;i<99;i++){
            sumnum += states[i]*znum[i<50?i:99-i];
            if (i<98) states[i] = states[i+1];
        }
        states[98] = invar;
        sumnum += states[98]*znum[0];
        return sumnum;
    }
}

float EQFilterGroup::mid_band_filter_channel1(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[199] = {
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
    };
    static float znum[100] = {
        5.954e-04,5.961e-04,5.993e-04,6.063e-04,6.178e-04,6.338e-04,6.53e-04,6.737e-04,6.931e-04,7.083e-04,
        7.168e-04,7.165e-04,7.07e-04,6.893e-04,6.665e-04,6.437e-04,6.275e-04,6.254e-04,6.455e-04,6.947e-04,
        7.783e-04,8.985e-04,1.054e-03,1.239e-03,1.442e-03,1.651e-03,1.848e-03,2.012e-03,2.126e-03,2.172e-03,
        2.136e-03,2.011e-03,1.797e-03,1.503e-03,1.144e-03,7.47e-04,3.422e-04,-3.494e-05,-3.481e-04,-5.635e-04,
        -6.534e-04,-6.e-04,-3.978e-04,-5.568e-05,4.017e-04,9.351e-04,1.492e-03,2.012e-03,2.427e-03,2.672e-03,
        2.688e-03,2.429e-03,1.868e-03,1.e-03,-1.548e-04,-1.55e-03,-3.114e-03,-4.755e-03,-6.368e-03,-7.839e-03,
        -9.059e-03,-9.93e-03,-1.038e-02,-1.036e-02,-9.862e-03,-8.925e-03,-7.625e-03,-6.078e-03,-4.433e-03,-2.866e-03,
        -1.56e-03,-6.995e-04,-4.474e-04,-9.339e-04,-2.241e-03,-4.392e-03,-7.342e-03,-1.098e-02,-1.511e-02,-1.95e-02,
        -2.385e-02,-2.783e-02,-3.111e-02,-3.335e-02,-3.426e-02,-3.36e-02,-3.12e-02,-2.699e-02,-2.1e-02,-1.336e-02,
        -4.321e-03,5.789e-03,1.656e-02,2.751e-02,3.814e-02,4.795e-02,5.647e-02,6.326e-02,6.799e-02,7.042e-02
    };
    if (setic==1){
        for (i=0;i<199;i++) states[i] = invar;
        return 0.0;
    }
    else{
        for (i=0;i<199;i++){
            sumnum += states[i]*znum[i<100?i:199-i];
            if (i<198) states[i] = states[i+1];
        }
        states[198] = invar;
        sumnum += states[198]*znum[0];
        return sumnum;
    }
}

float EQFilterGroup::mid_band_filter_channel2(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[199] = {
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
    };
    static float znum[100] = {
        5.954e-04,5.961e-04,5.993e-04,6.063e-04,6.178e-04,6.338e-04,6.53e-04,6.737e-04,6.931e-04,7.083e-04,
        7.168e-04,7.165e-04,7.07e-04,6.893e-04,6.665e-04,6.437e-04,6.275e-04,6.254e-04,6.455e-04,6.947e-04,
        7.783e-04,8.985e-04,1.054e-03,1.239e-03,1.442e-03,1.651e-03,1.848e-03,2.012e-03,2.126e-03,2.172e-03,
        2.136e-03,2.011e-03,1.797e-03,1.503e-03,1.144e-03,7.47e-04,3.422e-04,-3.494e-05,-3.481e-04,-5.635e-04,
        -6.534e-04,-6.e-04,-3.978e-04,-5.568e-05,4.017e-04,9.351e-04,1.492e-03,2.012e-03,2.427e-03,2.672e-03,
        2.688e-03,2.429e-03,1.868e-03,1.e-03,-1.548e-04,-1.55e-03,-3.114e-03,-4.755e-03,-6.368e-03,-7.839e-03,
        -9.059e-03,-9.93e-03,-1.038e-02,-1.036e-02,-9.862e-03,-8.925e-03,-7.625e-03,-6.078e-03,-4.433e-03,-2.866e-03,
        -1.56e-03,-6.995e-04,-4.474e-04,-9.339e-04,-2.241e-03,-4.392e-03,-7.342e-03,-1.098e-02,-1.511e-02,-1.95e-02,
        -2.385e-02,-2.783e-02,-3.111e-02,-3.335e-02,-3.426e-02,-3.36e-02,-3.12e-02,-2.699e-02,-2.1e-02,-1.336e-02,
        -4.321e-03,5.789e-03,1.656e-02,2.751e-02,3.814e-02,4.795e-02,5.647e-02,6.326e-02,6.799e-02,7.042e-02
    };
    if (setic==1){
        for (i=0;i<199;i++) states[i] = invar;
        return 0.0;
    }
    else{
        for (i=0;i<199;i++){
            sumnum += states[i]*znum[i<100?i:199-i];
            if (i<198) states[i] = states[i+1];
        }
        states[198] = invar;
        sumnum += states[198]*znum[0];
        return sumnum;
    }
}

float EQFilterGroup::high_band_filter_channel1(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[199] = {
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
    };
    static float znum[100] = {
        -1.079e-04,-1.081e-04,-1.094e-04,-1.13e-04,-1.193e-04,-1.279e-04,-1.377e-04,-1.465e-04,-1.516e-04,-1.5e-04,
        -1.391e-04,-1.169e-04,-8.294e-05,-3.831e-05,1.384e-05,6.845e-05,1.188e-04,1.571e-04,1.754e-04,1.663e-04,
        1.244e-04,4.701e-05,-6.489e-05,-2.061e-04,-3.672e-04,-5.348e-04,-6.923e-04,-8.215e-04,-9.042e-04,-9.241e-04,
        -8.687e-04,-7.316e-04,-5.135e-04,-2.235e-04,1.21e-04,4.947e-04,8.659e-04,1.199e-03,1.458e-03,1.608e-03,
        1.621e-03,1.48e-03,1.177e-03,7.22e-04,1.373e-04,-5.385e-04,-1.255e-03,-1.951e-03,-2.561e-03,-3.023e-03,
        -3.277e-03,-3.279e-03,-3.002e-03,-2.441e-03,-1.615e-03,-5.716e-04,6.206e-04,1.871e-03,3.077e-03,4.127e-03,
        4.914e-03,5.342e-03,5.339e-03,4.861e-03,3.904e-03,2.501e-03,7.293e-04,-1.295e-03,-3.422e-03,-5.48e-03,
        -7.285e-03,-8.655e-03,-9.428e-03,-9.475e-03,-8.712e-03,-7.117e-03,-4.73e-03,-1.664e-03,1.903e-03,5.73e-03,
        9.529e-03,1.298e-02,1.575e-02,1.752e-02,1.799e-02,1.693e-02,1.418e-02,9.668e-03,3.428e-03,-4.409e-03,
        -1.36e-02,-2.382e-02,-3.466e-02,-4.566e-02,-5.631e-02,-6.613e-02,-7.463e-02,-8.141e-02,-8.613e-02,.4114
    };
    if (setic==1){
        states[0] = (invar - 2.*initval);
        for (i=0;i<99;i++) states[i] = states[0];
        for (i=99;i<199;i++) states[i] = invar;
        return initval;
    }
    else{
        for (i=0;i<199;i++){
            sumnum += states[i]*znum[i<100?i:199-i];
            if (i<198) states[i] = states[i+1];
        }
        states[198] = invar;
        sumnum += states[198]*znum[0];
        return sumnum;
    }
}

float EQFilterGroup::high_band_filter_channel2(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[199] = {
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
    };
    static float znum[100] = {
        -1.079e-04,-1.081e-04,-1.094e-04,-1.13e-04,-1.193e-04,-1.279e-04,-1.377e-04,-1.465e-04,-1.516e-04,-1.5e-04,
        -1.391e-04,-1.169e-04,-8.294e-05,-3.831e-05,1.384e-05,6.845e-05,1.188e-04,1.571e-04,1.754e-04,1.663e-04,
        1.244e-04,4.701e-05,-6.489e-05,-2.061e-04,-3.672e-04,-5.348e-04,-6.923e-04,-8.215e-04,-9.042e-04,-9.241e-04,
        -8.687e-04,-7.316e-04,-5.135e-04,-2.235e-04,1.21e-04,4.947e-04,8.659e-04,1.199e-03,1.458e-03,1.608e-03,
        1.621e-03,1.48e-03,1.177e-03,7.22e-04,1.373e-04,-5.385e-04,-1.255e-03,-1.951e-03,-2.561e-03,-3.023e-03,
        -3.277e-03,-3.279e-03,-3.002e-03,-2.441e-03,-1.615e-03,-5.716e-04,6.206e-04,1.871e-03,3.077e-03,4.127e-03,
        4.914e-03,5.342e-03,5.339e-03,4.861e-03,3.904e-03,2.501e-03,7.293e-04,-1.295e-03,-3.422e-03,-5.48e-03,
        -7.285e-03,-8.655e-03,-9.428e-03,-9.475e-03,-8.712e-03,-7.117e-03,-4.73e-03,-1.664e-03,1.903e-03,5.73e-03,
        9.529e-03,1.298e-02,1.575e-02,1.752e-02,1.799e-02,1.693e-02,1.418e-02,9.668e-03,3.428e-03,-4.409e-03,
        -1.36e-02,-2.382e-02,-3.466e-02,-4.566e-02,-5.631e-02,-6.613e-02,-7.463e-02,-8.141e-02,-8.613e-02,.4114
    };
    if (setic==1){
        states[0] = (invar - 2.*initval);
        for (i=0;i<99;i++) states[i] = states[0];
        for (i=99;i<199;i++) states[i] = invar;
        return initval;
    }
    else{
        for (i=0;i<199;i++){
            sumnum += states[i]*znum[i<100?i:199-i];
            if (i<198) states[i] = states[i+1];
        }
        states[198] = invar;
        sumnum += states[198]*znum[0];
        return sumnum;
    }
}

float EQFilterGroup::low_band_filter_channel1(float invar, float initval, int setic)
{
    float sumnum=0.0; int i=0;
    static float states[99] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
    static float znum[50] = {
        0.0,3.204e-06,1.493e-05,3.84e-05,7.689e-05,1.337e-04,2.12e-04,3.151e-04,4.459e-04,6.074e-04,
        8.023e-04,1.033e-03,1.301e-03,1.61e-03,1.959e-03,2.352e-03,2.787e-03,3.266e-03,3.788e-03,4.352e-03,
        4.959e-03,5.606e-03,6.291e-03,7.011e-03,7.765e-03,8.548e-03,9.358e-03,1.019e-02,1.104e-02,1.19e-02,
        1.277e-02,1.364e-02,1.451e-02,1.537e-02,1.622e-02,1.705e-02,1.785e-02,1.863e-02,1.936e-02,2.006e-02,
        2.071e-02,2.131e-02,2.185e-02,2.234e-02,2.276e-02,2.312e-02,2.341e-02,2.363e-02,2.378e-02,2.385e-02
    };
    if (setic==1){
        for (i=0;i<99;i++) states[i] = initval;
        return initval;
    }
    else{
        for (i=0;i<99;i++){
            sumnum += states[i]*znum[i<50?i:99-i];
            if (i<98) states[i] = states[i+1];
        }
        states[98] = invar;
        sumnum += states[98]*znum[0];
        return sumnum;
    }
}
